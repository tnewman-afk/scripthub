local tar = game.workspace:FindFirstChild("AstroValues")
if tar then
    tar:Destroy()
end
local tart = game.workspace:FindFirstChild("Custom Animations")
if tart then
    tart:Destroy()
end
local AstroValues = Instance.new("Folder",workspace)
AstroValues.Name = "AstroValues"
local ActiveKey = Instance.new("StringValue",workspace.AstroValues)
ActiveKey.Name = "Keys"
--starter
local Animation_Folder = Instance.new("Folder")
Animation_Folder.Parent = workspace
Animation_Folder.Name = "Custom Animations"
--Kolmove Animation
local AnimationId = "6112652562"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "kolmove"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["kolmove"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--masspain Animation
local AnimationId = "5414156941"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "masspain"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["masspain"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Push Animation
local AnimationId = "5412263593"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "push"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["push"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)
--Delfan Animatio--]]
local AnimationId = "5815383220"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "delfan"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["delfan"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Fire Circle Animation
local AnimationId = "5414902308"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "fire circle"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["fire circle"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Motus Animation
local AnimationId = "4756402298"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "motus"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["motus"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Self Siphon Animation
local AnimationId = "4786138659"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "Self Siphon"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["Self Siphon"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Siphon Energy
local AnimationId = "4756427378"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "Siphon"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["Siphon"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Ah sha lana
local AnimationId = "5422859012"
local Anim = Instance.new("Animation")
Anim.Parent = game:GetService("Workspace")["Custom Animations"]
Anim.Name = "Ah sha lana"
Anim.AnimationId = "rbxassetid://"..AnimationId
--[[
local Anim = game:GetService("Workspace")["Custom Animations"]["Ah sha lana"]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
local Player = game.Players.LocalPlayer
local Character = Player.Character
local hum = Character.HumanoidRootPart
local Position = hum.CFrame
local Rep = game:GetService("ReplicatedStorage")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Gui = Library.CreateLib(" Mystic Falls| Made By Me mwuah", "Ocean")
local Binds = Gui:NewTab("Keybinds");
local WB = Binds:NewSection("Witch Keybinds")
local VB = Binds:NewSection("Energy Keybinds")
local Witch = Gui:NewTab("Witches");
local W = Witch:NewSection("Witches")
local Vamp = Gui:NewTab("Vamp/Wolf");
local V = Vamp:NewSection("VAMPIRE")
local Misc = Gui:NewTab("Misc");
local M = Misc:NewSection("Misc")
local Teleports = Gui:NewTab("Teleports");
local T = Teleports:NewSection("Teleports")
local Custom = Gui:NewTab("Custom Spells");
local Cu = Custom:NewSection("Custom Spells")
local Occupied = Gui:NewTab("Occupied Check");
local O = Occupied:NewSection("Occupied Check")
local Paid = Gui:NewTab("Abuse Char");
local P = Paid:NewSection("Sybil Section")
local Credits = Gui:NewTab("Credits");
local C = Credits:NewSection("Credits")
local Gui = Gui:NewTab("Gui");
local G = Gui:NewSection("Gui")

V:NewToggle("Vampire Immortality", "", function(I)
    _G.IMMORTAL = I

    while _G.IMMORTAL == true  do
        local args = {
            [1] = false
        }

        game:GetService("Players").LocalPlayer.Character.BurnInSun.Control:FireServer(unpack(args))
        wait()
    end
end)
V:NewToggle("Kill All(vamp only)", "", function(SPAM)
    _G.HealSpam = SPAM
    while _G.HealSpam == true do
        local Plr = game.Players.LocalPlayer
        for i, Player in pairs (game.Players:GetPlayers()) do

            if Player.Character ~= nil and Player ~= Plr then
                local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                if mag < 999999999 then
                    local Target = Player.Character or Player.CharacterAdded:Wait()
                    local args = {
                        [1] = "Heal",
                        [2] = {
                            [1] = Target
                        }
                    }

                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
        wait()
    end
end)
V:NewToggle("Spam Punch All", "", function(PU)
    _G.PUNCH = PU
    while _G.PUNCH == true do
        local Plr = game.Players.LocalPlayer
        for i, Player in pairs (game.Players:GetPlayers()) do
        
            if Player.Character ~= nil and Player ~= Plr then
                local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                if mag < 10000 then
                    local Target = Player.Character or Player.CharacterAdded:Wait()
                    local args = {
                        [1] = "Punch",
                        [2] = {
                            [1] = false,
                            [2] = Target.Humanoid
                        }
                    }
        
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
        wait()
    end
end)
V:NewButton("Super Feed(C)", "", function()
    local UserInputService = game:GetService("UserInputService")
    local keybind = Enum.KeyCode.C
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = "Feed",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton("Super Heal(E)", "", function()
    local UserInputService = game:GetService("UserInputService")
    local keybind = Enum.KeyCode.E
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = "Heal",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton("Wolf Bite(U)", "", function()
	local UserInputService = game:GetService("UserInputService")
	local keybind = Enum.KeyCode.U
	local function iskeybinddown()
	    return UserInputService:IsKeyDown(keybind)
	end
	local function Input(input, gameProcessedEvent)
	    local localplr = game.Players.LocalPlayer
	    local mouse = localplr:GetMouse()
	    if iskeybinddown() then
		if mouse.Target and mouse.Target.Parent then
		    plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
		    if plr ~= nil then
			local user = game.Players[plr.Name].Character
			local args = {
			    [1] = "Bite",
			    [2] = {
				[2] = user,
				[1] = false
			    }
			}

			game:GetService("ReplicatedStorage").Events.Werewolf:FireServer(unpack(args))
			print(plr.Name)
		    end
		end
	    end
	end
	UserInputService.InputBegan:Connect(Input)
end)
V:NewButton("Feed On Yourself", "", function()
   local args = {
      [1] = "Feed",
      [2] = {
          [1] = game:GetService("Players").LocalPlayer.Character
      }
  }
  
  game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
  wait(0.5)
  local args = {
      [1] = "Heal",
      [2] = {
          [1] = game:GetService("Players").LocalPlayer.Character
      }
  }
  
  game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
end)
V:NewButton("Snap All", "", function() 
    local plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= plr then
            local mag = (Player.Character.UpperTorso.Position - plr.Character.UpperTorso.Position).magnitude
            if mag < 9999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = "NeckSnap",
                    [2] = {
                        [1] = Target
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))
            end
        end
    end
end) 
V:NewButton("Wolf Bite All", "", function() 
    local plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= plr then
            local mag = (Player.Character.UpperTorso.Position - plr.Character.UpperTorso.Position).magnitude
            if mag < 9999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = "Bite",
                    [2] = {
                        [1] = false,
                        [2] = Target
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Werewolf:FireServer(unpack(args))
            end
        end
    end
end) 
V:NewButton("Remove Wolf-Ven", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid

	local Bite = Character:WaitForChild("WerewolfVenom")
	Bite:Destroy()
end)
V:NewButton("Compulsion", "", function()
	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.G

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then

					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "GiveStake"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)



	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.X

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end

	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "PunchSelf"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.C

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end

	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "RingOff"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.R

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "StandStill"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.M

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "Sleep"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)




	local UserInputService = game:GetService("UserInputService")

	local keybind = Enum.KeyCode.T

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))

					local A_1 = "WerewolfTurn"
					local A_2 = 
						{
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					local Event = game:GetService("ReplicatedStorage").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)


	local keybind = Enum.KeyCode.Q

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = "Start",
						[2] = {
							[1] = game:GetService("Workspace").Live[plr.Name]
						}
					}

					game:GetService("ReplicatedStorage").Events.Compulsion:FireServer(unpack(args))
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

end)
V:NewButton("Gravity Gun", "", function()
    loadstring(game:HttpGet(('https://pastebin.com/raw/vKLPUB6r'),true))()
    -- Q & E - bring closer and further
    -- R - Roates Block
    -- T - Tilts Block
    -- Y - Throws Block
    loadstring(game:HttpGet(('https://pastebin.com/raw/fRRFiz3V'),true))()
end)
V:NewLabel("WOLF")
V:NewButton("Control Turn(L and K)", "", function()
    local bind = 'l'
    local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
    
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
            if IsTyping then return end
        if key == bind then
            local player = getPlayer()
            local Mouse = game.Players.LocalPlayer:GetMouse()
            local args = {
                [1] = "Turn",
                [2] = {
                   [1] = "turnBack"
                }
             }
             
             game:GetService("ReplicatedStorage").Events.Werewolf:FireServer(unpack(args))																			
        end
    end)
    local bind = 'k'
    local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
    
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
            if IsTyping then return end
        if key == bind then
            local player = getPlayer()
            local Mouse = game.Players.LocalPlayer:GetMouse()
            local args = {
                [1] = "Turn",
                [2] = {
                   [1] = "Turn"
                }
             }
             
             game:GetService("ReplicatedStorage").Events.Werewolf:FireServer(unpack(args))																			
        end
    end)
end)
V:NewButton("Snap(V)", "", function()
   local UserInputService = game:GetService("UserInputService")
   local keybind = Enum.KeyCode.V
   local function iskeybinddown()
       return UserInputService:IsKeyDown(keybind)
   end
   local function Input(input, gameProcessedEvent)
       local localplr = game.Players.LocalPlayer
       local mouse = localplr:GetMouse()
       if iskeybinddown() then
           if mouse.Target and mouse.Target.Parent then
               plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
               if plr ~= nil then
                   local user = game.Players[plr.Name].Character
                   local args = {
                     [1] = "NeckSnap",
                     [2] = {
                         [1] = user
                     }
                 }
                 
                 game:GetService("ReplicatedStorage").Events.Vampire:FireServer(unpack(args))                 
                   print(plr.Name)
               end
           end
       end
   end
   UserInputService.InputBegan:Connect(Input)
end)
W:NewToggle("Lag Server 3(100k magic needed))", "", function(C)
	_G.LAG = C

	while _G.LAG == true do 
		local Plr = game.Players.LocalPlayer

		for i, Player in pairs (game.Players:GetPlayers()) do
			if Player.Character ~= nil and Player ~= Plr then
				local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
				if mag < 999999 then
					local Target = Player.Character or Player.CharacterAdded:Wait()
	
					local A_1 = "Magic"
					local A_2 = 
						{
							[1] = "Explosion",
							[2] = Target.HumanoidRootPart.CFrame.p
						}
					local Event = game:GetService("ReplicatedStorage").Events.Witch
					Event:FireServer(A_1, A_2)
	
	
				end
			end
		end
		wait(0.5)
	end
end)
W:NewToggle("LoopDeleteChannel", "", function(toggle)
	_G.DeleteChannel = toggle
	while _G.DeleteChannel == true do
		local Player = game.Players.LocalPlayer
		local Character = Player.Character

		local Channel = Character:WaitForChild("Channeling")
		Channel:Destroy()
		wait()
	end
end)
W:NewToggle("Spam Channel Whole Server", "", function(cha)
   _G.channel = cha
   while _G.channel == true do
      local Plr = game.Players.LocalPlayer
      for i, Player in pairs (game.Players:GetPlayers()) do
         if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
               local Target = Player.Character or Player.CharacterAdded:Wait()

               local args = {
                  [1] = "Magic",
                  [2] = {
                     [1] = "requestChanneling",
                     [2] = Target
                  }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
         end
      end
      wait()
   end
end)
W:NewToggle("Push All", "", function(PushAll)
	_G.PushAll = PushAll
	local AnimationId = "5422859012"
	local AnimationId = "5422859012"
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://"..AnimationId
	local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	k:Play()
	k:AdjustSpeed(1)
	wait(2)
	while _G.PushAll == true do
	local Plr = game.Players.LocalPlayer
		for i, Player in pairs (game.Players:GetPlayers()) do
	
			if Player.Character ~= nil and Player ~= Plr then
				local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
				if mag < 999999 then
					local Target = Player.Character or Player.CharacterAdded:Wait()
	
					local A_1 = "Push"
					local A_2 = 
						{
							[1] = Target
						}
					local Event = game:GetService("ReplicatedStorage").Events.Witch
					Event:FireServer(A_1, A_2)
	
				end
			end
		end
		wait()
	end
end)
W:NewTextBox("LoopChannel", "", function(plr)
    local Players = game:GetService("Players")
    local msg = plr
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end

    local player = findPlayer(msg)
    print(player)

	_G.CHANNEL = true 
	    while _G.CHANNEL == true do
	    local args = {
		[1] = "Channel",
		[2] = {
		    [1] = true,
		    [2] = player.Character
		}
	    }
	    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

	    local args = {
		[1] = "Magic",
		[2] = {
		    [1] = "requestChanneling",
		    [2] = player.Character
		}
	    }
	    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
	    wait()
	end
end)
--[[W:NewButton("UnragdollKeybind(z) ", "", function()
	local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()
	bind = "z"
	mouse.KeyDown:connect(function(key)
        if IsTyping then return end
		if key == bind then
			local args = {
				[1] = 1
			}
			game:GetService("ReplicatedStorage").Events.FallDamage:FireServer(unpack(args))
		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Unradoll Keybind loaded";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
W:NewButton("All Keybinds", "", function()
	print("a")
	local state = true
    if state == true then
        local bind = 'g'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "PainInflict",
                        [2] = {
                            [1] = player.Character,
                            [2] = false
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																
                end
            end
        end)
        local bind = 'r'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Push",
                        [2] = {
                            [1] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
                end
            end
        end)
        local bind = 'c'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "FireSpell",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 't'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "BreakLeg",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'j'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "SnapNeck",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'l'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "DisableRing",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																							
                end
            end
        end)
        local bind = 'k'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "EnableRing",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
                                                                                        
                end
            end
        end)
        local bind = 'b'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Magic",
                        [2] = {
                            [1] = "TelekineticHeart",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'x'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = "Siphon",
                        [2] = {
                            [1] = player.Character,
                            [2] = "Offensive"
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'm'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local A_1 = "Magic"
                    local A_2 = 
                        {
                            [1] = "BloodChoke", 
                            [2] = player.Character
                        }
                    local Event = game:GetService("ReplicatedStorage").Events.Witch
                    Event:FireServer(A_1, A_2)																					
                end
            end
        end)
        local bind = 'q'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                local args = {
                   [1] = "Magic",
                   [2] = {
                       [1] = "FireCircle",
                       [2] = player.Character
                   }
               }
               
               game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))                                                                       
                end
            end
        end)
        local bind = 'y'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end

            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                local Mouse = game.Players.LocalPlayer:GetMouse()
                local A_1 = "Magic"
                local A_2 = 
                {
                    [1] = "Explosion",
                    [2] = Mouse.Hit.p
                }
                local Event = game:GetService("ReplicatedStorage").Events.Witch
                Event:FireServer(A_1, A_2)																				
            end
        end)
        local bind = 'f'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end

            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                local Mouse = game.Players.LocalPlayer:GetMouse()
                local args = {
                    [1] = "Magic",
                    [2] = {
                    [1] = "Motus",
                    [2] = false
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
            end
        end)
        local bind = 'p'
        local function getPlayer()
                local userInput = game:GetService("UserInputService")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end

            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                local Mouse = game.Players.LocalPlayer:GetMouse()
                local args = {
                    [1] = "Magic",
                    [2] = {
                    [1] = "SnapAll"
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																					
            end
        end)
    else
        print("state not valid")
    end
end)]]
W:NewButton("Immortality", "", function()
    local plr = game.Players.LocalPlayer
    game.workspace.Live[plr.Name].Immortality.Comm:Destroy()
end)
W:NewButton("See Other Side", "", function()
	local plr = game.Players.LocalPlayer
	local char = plr.Character or plr.CharacterAdded:Wait()
	local fold = Instance.new("Folder")
	fold.Name = "SeeGhosts"
	fold.Parent = char

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "See Other Side loaded";
		Text = "Made by HeartBroken_Boi#0001"
	})

end)
W:NewButton("Vervain Body Loop", "", function()
    local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Live = game.Workspace.Live
	local RunService = game:GetService("RunService")
	local Debounce = false

	while task.wait(2) do
		if not game.Players.LocalPlayer.Character:FindFirstChild("VervainBody") and game.Workspace.Live:FindFirstChild(game.Players.LocalPlayer.Character.Name) then
			local A_1 = "Magic"
			local A_2 = 
				{
					[1] = "VervainBody",
					[2] = game.Players.LocalPlayer.Character
				}
			local Event = game:GetService("ReplicatedStorage").Events.Witch
			Event:FireServer(A_1, A_2)
		end
	end
end)
W:NewButton("Summon Expression", "", function()
    local Anim = game:GetService("Workspace")["Custom Animations"]["Ah sha lana"]
    local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
    k:Play()
    k:AdjustSpeed(1)
    wait(1)
    local args = {
        [1] = "Magic",
        [2] = {
            [1] = "Motus",
            [2] = false
        }
    }
    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    local Anim = game:GetService("Workspace")["Custom Animations"]["motus"]
    local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
    k:Play()
    k:AdjustSpeed(1)
    wait(1)
    local Anim = game:GetService("Workspace")["Custom Animations"]["masspain"]
    local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
    k:Play()
    k:AdjustSpeed(1)
    local Anim = game:GetService("Workspace")["Custom Animations"]["kolmove"]
    local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
    k:Play()
    k:AdjustSpeed(1)
    for i=1,20 do
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.Head.Position - Plr.Character.Head.Position).magnitude
            if mag < 999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = "Magic",
                    [2] = {
                        [1] = "Explosion",
                        [2] = Target.HumanoidRootPart.CFrame.p
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
        end
    end
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()

                local A_1 = "Push"
                local A_2 = 
                    {
                        [1] = Target
                    }
                local Event = game:GetService("ReplicatedStorage").Events.Witch
                Event:FireServer(A_1, A_2)
            end
        end
    end
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = "Magic",
                    [2] = {
                        [1] = "BreakLeg",
                        [2] = Target
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
        end
    end
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = "Magic",
                    [2] = {
                        [1] = "Freeze",
                        [2] = Target
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
        end
    end
    end
    wait(6)
    local Humanoid = game.Players.LocalPlayer.Character.Humanoid
    local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
    for _,v in pairs(ActiveTracks)
        do v:Stop()
    end
end)
W:NewButton("Kill Random Player", "", function()
    local plrs = game.Players
    local num = math.random(1, #plrs:GetChildren())
    local chosenplr = plrs:GetChildren()[num]
    print(chosenplr.Name.." was chosen!")
    local POS = chosenplr.Character.HumanoidRootPart.CFrame.p
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(POS)
    wait(0.5)
    local args = {
        [1] = "PainInflict",
        [2] = {
            [1] = chosenplr.Character,
            [2] = false
        }
    }
    for i=1,100 do
    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))      
    end      
end)
W:NewButton("Kill Around You", "", function()
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 100 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = "PainInflict",
                    [2] = {
                        [1] = Target,
                        [2] = false
                    }
                }
                for i=1,50 do
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))      
                end      
            end
        end
    end
end)
W:NewButton("Push All", "", function()
    	local Plr = game.Players.LocalPlayer
    		for i, Player in pairs (game.Players:GetPlayers()) do
    	
    			if Player.Character ~= nil and Player ~= Plr then
    				local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
    				if mag < 999999999999 then
    					local Target = Player.Character or Player.CharacterAdded:Wait()
    	
    					local A_1 = "Push"
    					local A_2 = 
    						{
    							[1] = Target
    						}
    					local Event = game:GetService("ReplicatedStorage").Events.Witch
    					Event:FireServer(A_1, A_2)
    	
    				end
    			end
    		end
end)
W:NewButton("Explode All", "", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "Explosion",
						[2] = Target.HumanoidRootPart.CFrame.p
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton("Delfan All", "", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "TelekineticHeart",
						[2] = Target
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton("Sleep All", "", function()

	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "SleepSpell",
						[2] = Target
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton("Channel All", "", function()
	local Plr = game.Players.LocalPlayer
	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

            local args = {
               [1] = "Magic",
               [2] = {
                   [1] = "requestChanneling",
                   [2] = Target
               }
           }
           
           game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
			end
		end
	end
end)
W:NewButton("Disable All Rings", "", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "DisableRing",
						[2] = Target
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end
end)
W:NewButton("Siphon Around You", "", function()
   local Plr = game.Players.LocalPlayer
   for i, Player in pairs (game.Players:GetPlayers()) do

      if Player.Character ~= nil and Player ~= Plr then
         local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
         if mag < 10 then
            local Target = Player.Character or Player.CharacterAdded:Wait()

            local args = {
               [1] = "Siphon",
               [2] = {
                  [1] = Target,
                  [2] = "Offensive"
               }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))	
         end
      end
   end
end)
--[[W:NewLabel("KEYBINDS")
W:NewButton("Teleportation KeyBind (T)", "", function()
	--local Debounce = true
	local Key = 'T'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local A_1 = "Magic"
			local A_2 = 
				{
					[1] = "Teleport", 
					[2] = Mouse.Hit.p
				}
			local Event = game:GetService("ReplicatedStorage").Events.Witch
			Event:FireServer(A_1, A_2)

		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Teleportation KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
W:NewButton("Invisibility KeyBind (B)", "", function()

	--local Debounce = true
	local Key = 'B'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local A_1 = "Magic"
			local A_2 = 
				{
					[1] = "Invisibility"
				}
			local Event = game:GetService("ReplicatedStorage").Events.Witch
			Event:FireServer(A_1, A_2)

		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Invisibility KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})


end)
W:NewButton("Explosion KeyBind (Y)", "", function()

	--local Debounce = true
	local Key = 'Y'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local A_1 = "Magic"
			local A_2 = 
				{
					[1] = "Explosion", 
					[2] = Mouse.Hit.p
				}
			local Event = game:GetService("ReplicatedStorage").Events.Witch
			Event:FireServer(A_1, A_2)

		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Explosion KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
W:NewButton("Sleep KeyBind (Q)", "", function()

	--local Debounce = true
	local Key = 'Q'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass("Model")
				if model then
					if model:FindFirstChild("Humanoid") then
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "SleepSpell", 
								[2] = model
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Sleep KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
W:NewButton("Heart Rip KeyBind (M)", "", function()

	--local Debounce = true
	local Key = 'M'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass("Model")
				if model then
					if model:FindFirstChild("Humanoid") then
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "TelekineticHeart", 
								[2] = model
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Telekinetic Heart KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
W:NewButton("Disabling Ring Keybind (L)", "", function()

	--local Debounce = true
	local Key = 'L'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass("Model")
				if model then
					if model:FindFirstChild("Humanoid") then
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "DisableRing", 
								[2] = model
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Disable Ring KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
W:NewButton("Enabling Ring Keybind (K)", "", function()

	--local Debounce = true
	local Key = 'K'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass("Model")
				if model then
					if model:FindFirstChild("Humanoid") then
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "EnableRing", 
								[2] = model
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Enable Ring KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
W:NewButton("VervainBody KeyBind (N)", "", function()

	--local Debounce = true
	local Key = 'N'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass("Model")
				if model then
					if model:FindFirstChild("Humanoid") then
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "VervainBody",
								[2] = model
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)
					end
				end
			else
				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "VervainBody",
						[2] = Character
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Vervain Body KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
W:NewButton("Incendia Keybind (C)", "", function()

	--local Debounce = true
	local Key = 'C'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass("Model")
				if model then
					if model:FindFirstChild("Humanoid") then
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "FireSpell", 
								[2] = model
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Incendia KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})

end)
W:NewButton("Davina BloodChoke(M)", "", function()

	--local Debounce = true
	local Key = 'M'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass("Model")
				if model then
					if model:FindFirstChild("Humanoid") then
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "BloodChoke", 
								[2] = model
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "BloodChoke KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})

end)
W:NewButton("FireCircle(Q)", "", function()

	--local Debounce = true
	local Key = 'Q'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass("Model")
				if model then
					if model:FindFirstChild("Humanoid") then
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "FireCircle", 
								[2] = model
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "BloodChoke KeyBind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})

end)
W:NewButton("Motus Keybind (J)", "", function()

	--local Debounce = true
	local Key = 'J'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local A_1 = "Magic"
			local A_2 = 
				{
					[1] = "Motus",
					[2] = false,
				}
			local Event = game:GetService("ReplicatedStorage").Events.Witch
			Event:FireServer(A_1, A_2)

		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Motus Keybind loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})

end)    
W:NewButton("Snap Around You Keybind (P)", "", function()

	--local Debounce = true
	local Key = 'P'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local A_1 = "Magic"
			local A_2 = 
				{
					[1] = "SnapAll"
				}
			local Event = game:GetService("ReplicatedStorage").Events.Witch
			Event:FireServer(A_1, A_2)

		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Snap Around loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})

end) 
W:NewButton("Mass Pain(V)", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService("UserInputService")
	local Mouse = Player:GetMouse()
	--local Debounce = true
	local Key = 'V'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local args = {
				[1] = "Magic",
				[2] = {
					[1] = "AdvancedInflict"
				}
			}
			game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Mass Pain Loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})

end)--]]
W:NewLabel("SPELLS")
W:NewButton("Copy Ressuraction Spell", "", function()
	setclipboard([[/c Victus phasmatis ex eleto, revertas phasmatis ut victus]])
end)
W:NewButton("Copy Locator Spell", "", function()
	setclipboard([[/c Phasmatos tribum, nas ex veras, sequitas sanguinem]])
end)
W:NewButton("Copy Explosion Spell", "", function()
	setclipboard([[/c Phasmatos tribum, nas ex veras, sequitas sanguinem]])
end)
W:NewButton("Copy Ring Enable Spell", "", function()
	setclipboard([[/cPhasmatos tribum, incendias mota ]])
end)
W:NewButton("Copy Ring Disable Spell", "", function()
	setclipboard([[/c Phasmatos tribum, vectus incendias malos]])
end)
W:NewButton("Copy Ring Making Spell", "", function()
	setclipboard([[/c Phasmatos Tribum, Valls Partum Circulum]])
end)
W:NewLabel("TOGGLES OF LAG")
W:NewToggle("Lag Server 1", "", function(A)
    _G.lag = A
    while _G.Lag == true do
    	local Event = game:GetService("ReplicatedStorage").Events.Werewolf
    	Event:FireServer(A_1, A_2)
    end
end)
W:NewToggle("Lag Server 2", "", function(B)
	_G.TrueStatement = B

	while _G.TrueStatement == true do 
		for i, v in pairs(ReplicatedStorage.Events:GetChildren()) do
			if v:IsA("RemoteEvent") then
				v:FireServer()
			elseif v:IsA("RemoteFunction") then
				v:InvokeServer()
			end
		end
	end
end)
W:NewLabel("CHAOS KEYBINDS")
W:NewButton("Loop Bomb(KeyPadOne = on KeyPadTwo = off)", "", function()
	local UserInputService = game:GetService("UserInputService")
	local keybind = Enum.KeyCode.KeypadOne
	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end
	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local user = game.Players[plr.Name].Character
					local pos = game.workspace.Live[plr.Name].HumanoidRootPart.Position
					local args = {
						[1] = "Push",
						[2] = {
							[1] = user
						}
					}

					local e = game:GetService("ReplicatedStorage").Events.Witch

					local args = {
						[1] = "Magic",
						[2] = {
							[2] = user.HumanoidRootPart.CFrame.p,
							[1] = "Explosion"
						}
					}

					local br = game:GetService("ReplicatedStorage").Events.Witch
					_G.E = true
					while _G.E == true do
						br:FireServer(unpack(args))
						wait(0.5)
					end
					_G.A = true
					while _G.E == true do
						e:FireServer(unpack(args))
						wait()
					end

					print(plr.Name)
				end
			end
		end
	end
	UserInputService.InputBegan:Connect(Input)
	local HotKey = Enum.KeyCode.KeypadTwo
	local UIS = game:GetService("UserInputService")

	UIS.InputBegan:Connect(function(Key)
		if Key.KeyCode == HotKey then
			_G.E = false
			_G.A = false
		end
	end)
end)
W:NewButton("Loop Push(KeyPadThree = On KeyPadFour = Off)", "", function()
	local UserInputService = game:GetService("UserInputService")
	local keybind = Enum.KeyCode.KeypadThree
	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end
	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local user = game.Players[plr.Name].Character
					local args = {
						[1] = "Push",
						[2] = {
							[1] = user
						}
					}

					local e = game:GetService("ReplicatedStorage").Events.Witch
					_G.LOOP = true
					while _G.LOOP == true do
						e:FireServer(unpack(args))
						wait()
					end


					print(plr.Name)
				end
			end
		end
	end
	UserInputService.InputBegan:Connect(Input)
	local HotKeys = Enum.KeyCode.KeypadFour
	local UIS = game:GetService("UserInputService")

	UIS.InputBegan:Connect(function(Key)
		if Key.KeyCode == HotKeys then
			_G.LOOP = false
		end
	end)
end)
W:NewButton("Loop Punch(KeyPadNine = On KeyPadSix = Off)", "", function()
	local UserInputService = game:GetService("UserInputService")
	local keybind = Enum.KeyCode.KeypadNine
	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end
    _G.kill = true
	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local user = game.Players[plr.Name].Character
					local args = {
						[1] = "Punch",
						[2] = {
                            [1] = false,
							[2] = user.Humanoid
						}
					}

					local e = game:GetService("ReplicatedStorage").Events.Vampire
					while _G.kill == true do
						e:FireServer(unpack(args))
						wait()
					end


					print(plr.Name)
				end
			end
		end
	end
	UserInputService.InputBegan:Connect(Input)
	local HotKeys = Enum.KeyCode.KeypadSix
	local UIS = game:GetService("UserInputService")

	UIS.InputBegan:Connect(function(Key)
		if Key.KeyCode == HotKeys then
			_G.kill = false
		end
	end)
end)
--[[
M:NewToggle("Anti Blur", "", function(A)
    _G.A = A
    while _G.A == true do
        game.Lighting.Blur:Remove()
    end
end)--]]
M:NewTextBox("CustomName", "", function(NAME)
	_G.auto_name = true
	while _G.auto_name == true do
		local args = {
			[1] = NAME
		}
		
		game:GetService("ReplicatedStorage").Events.FilterText:InvokeServer(unpack(args))
		wait()
	end
end)
M:NewButton("Anti Ban", "", function()
	local Moderator = {
	    A = "fx3lip",
	    B = "uvita_omg",
	    C = "AdoreAdalyn",
	    D = "TheDivana",
	    E = "catfvsh",
	    F = "jcvierr",
	    G = "savients",
	    H = "Vazorie",
	    I = "Vazorio"
	}
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.A) then
		game.Players.LocalPlayer:Kick(Moderator.A.." Has Joined The Game You Were Saved")
	    end
	end)
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.B) then
		game.Players.LocalPlayer:Kick(Moderator.B.." Has Joined The Game You Were Saved")
	    end
	end)
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.C) then
		game.Players.LocalPlayer:Kick(Moderator.C.." Has Joined The Game You Were Saved")
	    end
	end)
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.D) then
		game.Players.LocalPlayer:Kick(Moderator.D.." Has Joined The Game You Were Saved")
	    end
	end)
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.E) then
		game.Players.LocalPlayer:Kick(Moderator.E.." Has Joined The Game You Were Saved")
	    end
	end)
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.F) then
		game.Players.LocalPlayer:Kick(Moderator.F.." Has Joined The Game You Were Saved")
	    end
	end)
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.G) then
		game.Players.LocalPlayer:Kick(Moderator.G.." Has Joined The Game You Were Saved")
	    end
	end)
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.H) then
		game.Players.LocalPlayer:Kick(Moderator.H.." Has Joined The Game You Were Saved")
	    end
	end)
	game:GetService("Players").PlayerAdded:Connect(function(player)
	    if player == game.Players:FindFirstChild(Moderator.I) then
		game.Players.LocalPlayer:Kick(Moderator.I.." Has Joined The Game You Were Saved")
	    end
	end)

	--[[game:GetService("Players").PlayerRemoving:Connect(function(player)
	    print(player.Name .. " left the game!")
	end)]]
    local Ban1 = game:GetService("ReplicatedStorage").Events:FindFirstChild("ModBan")
    local Ban2 = game:GetService("ReplicatedStorage").Events:FindFirstChild("BanClient")
    local Ban3 = game:GetService("ReplicatedStorage").Events:FindFirstChild("Ban")
    local Ban4 = game:GetService("ReplicatedStorage").Events:FindFirstChild("idontexploit")
    local Ban5 = game:GetService("ReplicatedStorage").Events:FindFirstChild("logAction")
    local Ban6 = game:GetService("ReplicatedStorage").Events:FindFirstChild("logAction")
    while _G.ANTIBAN == true do
        if Ban1 then
        Ban1:Destroy()
        end
        if Ban2 then
        Ban2:Destroy()
        end
        if Ban3 then
        Ban3:Destroy()
        end
        if Ban4 then
        Ban4:Destroy()
        end
        if Ban5 then
        Ban5:Destroy()
        end
        if Ban6 then
        Ban6:Destroy()
        end
        wait()
    end
end)
M:NewButton("Teleport To Custom ZontWare Platform", "", function()
	local zont = game.workspace:FindFirstChild("ZontWare AFK PlatForm")
	if zont then
		zont:Destroy()
	end
	local Zont_AFK_PlatForm = Instance.new("Part",workspace)
	Zont_AFK_PlatForm.Name = "ZontWare AFK PlatForm"
	Zont_AFK_PlatForm.Anchored = true
	Zont_AFK_PlatForm.Material = "Glass"
	Zont_AFK_PlatForm.Transparency = 0.3
	Zont_AFK_PlatForm.Reflectance = 0
	Zont_AFK_PlatForm.Size = Vector3.new(29.5,1,21.5)
	Zont_AFK_PlatForm.Position = Vector3.new(438.75, 383.641, -14824.75)
	wait(0.5)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(438.041, 387.29, -14825.377)
	wait(0.5)
end)
M:NewButton("Change Name", "", function()
	_G.auto_name = false
end)
M:NewButton("Stake All", "", function()
	local players = game.Workspace.Live

	for _,player in pairs (players:GetChildren()) do
		local link = game.Players:GetPlayerFromCharacter(player)
		if player:FindFirstChild("Humanoid") then
			if  link == game.Players.LocalPlayer then
				return
			else
				local A_1 = player
				local A_2 = "Original"
				local Event = game:GetService("ReplicatedStorage").Events.Stake
				Event:FireServer(A_1, A_2)
			end
		end
	end
end)
M:NewButton("Reload Gui", "", function()
	local GUI = game.CoreGui:FindFirstChild("ScreenGui")
	if GUI then
        for i=1,3 do
            GUI:Destroy()
        end
	end
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/BoiDiandre/TheLua/main/THE%20FLOPPIEST%20FLOP'),true))()
end)
M:NewButton("Hide Name Tag", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Live = game.Workspace.Live
	if Character.Head:FindFirstChild("Username") then
		local NameTag = Character.Head:FindFirstChild("Username")
		NameTag:Destroy()
	end
end)
M:NewButton("Inf Yeild", "", function()
	loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "inf Yield loaded";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
M:NewButton("Fly (f)", "", function()
    repeat wait()
    until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("UpperTorso") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid")
  local mouse = game.Players.LocalPlayer:GetMouse()
  repeat wait() until mouse
  local plr = game.Players.LocalPlayer
  local UpperTorso = plr.Character.UpperTorso
  local flying = true
  local deb = true
  local ctrl = {f = 0, b = 0, l = 0, r = 0}
  local lastctrl = {f = 0, b = 0, l = 0, r = 0}
  local maxspeed = 100
  local speed = 1
  
  function Fly()
  plr.Character.Humanoid.WalkSpeed = 16.5
  plr.Character.Humanoid.JumpPower = 50.5
  local bg = Instance.new("BodyGyro", UpperTorso)
  bg.P = 9e4
  bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
  bg.cframe = UpperTorso.CFrame
  local bv = Instance.new("BodyVelocity", UpperTorso)
  bv.velocity = Vector3.new(0,0.1,0)
  bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
  repeat wait()
  plr.Character.Humanoid.PlatformStand = true
  if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
  speed = speed+.5+(speed/maxspeed)
  if speed > maxspeed then
  speed = maxspeed
  end
  elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
  speed = speed-1
  if speed < 0 then
  speed = 0
  end
  end
  if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
  bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
  lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
  elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
  bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
  else
  bv.velocity = Vector3.new(0,0.1,0)
  end
  bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
  until not flying
  ctrl = {f = 0, b = 0, l = 0, r = 0}
  lastctrl = {f = 0, b = 0, l = 0, r = 0}
  speed = 0
  bg:Destroy()
  bv:Destroy()
  plr.Character.Humanoid.PlatformStand = false
  end
  mouse.KeyDown:connect(function(key)
  if key:lower() == "f" then
  if flying then flying = false
  else
  flying = true
  Fly()
  end
  elseif key:lower() == "w" then
  ctrl.f = 1
  elseif key:lower() == "s" then
  ctrl.b = -1
  elseif key:lower() == "a" then
  ctrl.l = -1
  elseif key:lower() == "d" then
  ctrl.r = 1
  end
  end)
  mouse.KeyUp:connect(function(key)
  if key:lower() == "w" then
  ctrl.f = 0
  elseif key:lower() == "s" then
  ctrl.b = 0
  elseif key:lower() == "a" then
  ctrl.l = 0
  elseif key:lower() == "d" then
  ctrl.r = 0
  end
  end)
  Fly()
  print("Fly Enabled")
end)
M:NewButton("Feed, Siphon and Heal YourSelf", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character


	local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)

	wait(1)

	for i = 1, 9, 1 do

		local A_1 = "SelfSiphon"
		local Event = game:GetService("ReplicatedStorage").Events.Witch
		Event:FireServer(A_1)

	end

	for i = 1, 2 do

		local A_1 = "Feed"
		local A_2 = 
			{
				[1] = Character
			}
		local Event = game:GetService("ReplicatedStorage").Events.Vampire
		Event:FireServer(A_1, A_2)

	end

	wait(4)


	local A_1 = "Heal"
	local A_2 = 
		{
			[1] = Character
		}
	local Event = game:GetService("ReplicatedStorage").Events.Vampire
	Event:FireServer(A_1, A_2)
end)
M:NewButton("Unglitch", "", function()
	local plr = game.Players.LocalPlayer
	local Character = plr.Character or plr.CharacterAdded:Wait()
	if Character:FindFirstChild("Acting") then
		Character:FindFirstChild("Acting"):Destroy()
		local Player = game.Players.LocalPlayer.Character.Humanoid.ragdoll
		Player.Value = true
		task.wait()
		Player.Value = false
	else
		local Player = game.Players.LocalPlayer.Character.Humanoid.ragdoll
		Player.Value = true
		task.wait()
		Player.Value = false

	end
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "UnGlitch loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
M:NewButton("Respawn", "", function()
	local Event = game:GetService("ReplicatedStorage").Events.Respawn
	Event:FireServer()
end)
M:NewButton("Mortal Respawn", "", function()
	local LocalPlayer = game.Players.LocalPlayer
	local Character = LocalPlayer.Character
	local Humanoid = Character.Humanoid
	local Mouse = LocalPlayer:GetMouse()
	local Respawn = game:GetService("ReplicatedStorage").Events.Respawn
	Respawn:FireServer()
	wait(1)
	local Morph = game:GetService("ReplicatedStorage").Events.Morph
	Morph:FireServer("Mortal")
end)
M:NewButton("Become Invisible", "", function()
   local plr = game.Players.LocalPlayer
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(321, -7, 409)
   wait(0.5)
   game.Players[plr.Name].Character.Head.Anchored = true
   wait(0.2)
   game.Players[plr.Name].Character.Head.Anchored = false
   wait(0.5)
   plr.Character:BreakJoints()
   wait(0.5)
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-275, 3, 185)
   	local speaker = game.Players.LocalPlayer
	local BeenASecond, V3 = false, Vector3.new(0, 0, 0)
	delay(1, function()
		BeenASecond = true
	end)
	while not BeenASecond do
		for _, v in ipairs(speaker.Character:GetDescendants()) do
			if v.IsA(v, "BasePart") then
				v.Velocity, v.RotVelocity = V3, V3
			end
		end
		wait()
	end
end)
M:NewButton("Inf Stamina(Also Works With Witch and Wolf)", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character

	while task.wait() do
		if Character:FindFirstChild("Stamina") then
			local Stamina = Character:FindFirstChild("Stamina")
			local Max = Stamina.Max
			Stamina.Value = 100
		end
	end
end)
M:NewButton("Dont Burn If Someone Used Spell To Disable Your Ring", "", function()

	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid

	local Bite = Character:WaitForChild("Ring")
	Bite.Active.Value = true

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Dont Burn loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})

end)
M:NewButton("Copy Join Code", "", function()
	setclipboard([[

        local TeleportService = game:GetService("TeleportService")
    TeleportService:TeleportToPlaceInstance(4754736350,"]]..game.JobId..[[", game.Players.LocalPlayer)]])
end)
M:NewButton("Auto Pick Up Stakes etc", "", function()
	local Human = speaker.Character:FindFirstChildWhichIsA("Humanoid")
	for _, v in ipairs(workspace:GetChildren()) do
		if speaker.Character and v:IsA("BackpackItem") and v:FindFirstChild("Handle") then
			Human:EquipTool(v)
		end
	end
	if grabtoolsFunc then grabtoolsFunc:Disconnect() end
	grabtoolsFunc = workspace.ChildAdded:Connect(function(v)
		if speaker.Character and v:IsA("BackpackItem") and v:FindFirstChild("Handle") then
			speaker.Character:WaitForChild("Humanoid"):EquipTool(v)
		end
	end)
end)
M:NewButton("Get Vervain", "", function()
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(68, 6, -47)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-106, 9, 45)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-512, 3, 178)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-486, 5, 238)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-495, 6, 14)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-257, -26, -70)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-504, 5, 265)
end)
M:NewButton("?Ress Player", "", function()

	local Prefix = "?"
	local Player = game:GetService("Players").LocalPlayer

	local function GetPlayer(String) -- Credit to Timeless/xFunnieuss
		local Found = {}
		local strl = String:lower()
		if strl == "all" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				table.insert(Found,v)
			end
		elseif strl == "others" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name ~= Player.Name then
					table.insert(Found,v)
				end
			end  
		elseif strl == "me" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name == Player.Name then
					table.insert(Found,v)
				end
			end  
		else
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name:lower():sub(1, #String) == String:lower() then
					table.insert(Found,v)
				end
			end    
		end
		return Found    
	end


	Player.Chatted:Connect(function(Message)
		if string.sub(Message, 1, 6) == (Prefix.."ress ") or string.sub(Message, 1, 6) == (Prefix.."Ress ") or string.sub(Message, 1, 6) == (Prefix.."REss ") or string.sub(Message, 1, 6) == (Prefix.."RESs ") or string.sub(Message, 1, 6) == (Prefix.."RESS ") or string.sub(Message, 1, 6) == (Prefix.."rEss ") then
			for i,v in pairs(GetPlayer(string.sub(Message, 7))) do
				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "Motus",
						[2] = true,
						[3] = game:GetService("Workspace").deathClones[v.Name..("deathClone")]
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)
			end
		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Summon Dead Bodies loaded!";
		Text = "To use type in chat ?Ress PlayerName"
	})

end)
M:NewButton("Summon Dead Bodies", "", function()

	local Prefix = "?"
	local Player = game:GetService("Players").LocalPlayer

	local function GetPlayer(String) -- Credit to Timeless/xFunnieuss
		local Found = {}
		local strl = String:lower()
		if strl == "all" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				table.insert(Found,v)
			end
		elseif strl == "others" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name ~= Player.Name then
					table.insert(Found,v)
				end
			end  
		elseif strl == "me" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name == Player.Name then
					table.insert(Found,v)
				end
			end  
		else
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name:lower():sub(1, #String) == String:lower() then
					table.insert(Found,v)
				end
			end    
		end
		return Found    
	end


	Player.Chatted:Connect(function(Message)
		if string.sub(Message, 1, 6) == (Prefix.."ress ") or string.sub(Message, 1, 6) == (Prefix.."Ress ") or string.sub(Message, 1, 6) == (Prefix.."REss ") or string.sub(Message, 1, 6) == (Prefix.."RESs ") or string.sub(Message, 1, 6) == (Prefix.."RESS ") or string.sub(Message, 1, 6) == (Prefix.."rEss ") then
			for i,v in pairs(GetPlayer(string.sub(Message, 7))) do
				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "Motus",
						[2] = true,
						[3] = game:GetService("Workspace").deathClones[v.Name..("deathClone")]
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)
			end
		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Summon Dead Bodies loaded!";
		Text = "Made by BekacPros. To use type in chat ?Ress PlayerName"
	})

end)
M:NewButton("Sybil Server Crash", "", function()
    local Plr = game.Players.LocalPlayer

    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
    
                local args = {
                    [1] = "SirenInflict",
                    [2] = {
                        [1] = Target
                    }
                }
                for i=1,300 do
                    game:GetService("ReplicatedStorage").Events.Siren:FireServer(unpack(args))
                end
            end
        end
    end
end)
M:NewButton("?AutoSleep Players", "", function()
	_G.AutoSleepPlayers = {}
	local Prefix = "?"
	local Player = game:GetService("Players").LocalPlayer

	local function GetPlayer(String) -- Credit to Timeless/xFunnieuss
		local Found = {}
		local strl = String:lower()
		if strl == "all" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				table.insert(Found,v)
			end
		elseif strl == "others" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name ~= Player.Name then
					table.insert(Found,v)
				end
			end  
		elseif strl == "me" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name == Player.Name then
					table.insert(Found,v)
				end
			end  
		else
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name:lower():sub(1, #String) == String:lower() then
					table.insert(Found,v)
				end
			end    
		end
		return Found    
	end

	local Number = 11
	local Number2 = 15
	Player.Chatted:Connect(function(Message)
		if string.sub(Message, 1, Number) == (Prefix.."AutoSleep ") or string.sub(Message, 1, Number) == (Prefix.."Autosleep ") or string.sub(Message, 1, Number) == (Prefix.."autosleep ") or string.sub(Message, 1, Number) == (Prefix.."AUtosleep ") or string.sub(Message, 1, Number) == (Prefix.."AUTOSLEEP ") or string.sub(Message, 1, Number) == (Prefix.."AUtoSleep ") then
			for i,v in pairs(GetPlayer(string.sub(Message, (Number + 1)))) do
				_G.AutoSleepPlayers[v.Name] = true
				coroutine.resume(coroutine.create(function()
					while task.wait(7) do
						if _G.AutoSleepPlayers[v.Name] == true and game.Workspace.Live:FindFirstChild(v.Name) then
							local A_1 = "Magic"
							local A_2 = 
								{
									[1] = "SleepSpell", 
									[2] = game.Workspace.Live[v.Name]
								}
							local Event = game:GetService("ReplicatedStorage").Events.Witch
							Event:FireServer(A_1, A_2)
						else
							game:GetService("StarterGui"):SetCore("SendNotification", {
								Title = "Auto Sleep Crashed!";
								Text = "Player "..v.Name.."Either Left or you disabled it. Loop doesnt work for this player anymore"
							})
							break
						end
					end
				end))
			end
		elseif string.sub(Message, 1, Number2) == (Prefix.."StopAutoSleep ") or string.sub(Message, 1, Number2) == (Prefix.."stopAutosleep ") or string.sub(Message, 1, Number2) == (Prefix.."stopautosleep ") or string.sub(Message, 1, Number2) == (Prefix.."STopAutoSleep ") or string.sub(Message, 1, Number2) == (Prefix.."STOPAUTOSLEEP ") or string.sub(Message, 1, Number2) == (Prefix.."stopAutoSleep ") then
			for i,v in pairs(GetPlayer(string.sub(Message, (Number2 + 1)))) do
				_G.AutoSleepPlayers[v.Name] = false
			end
		end
	end)

	task.wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Auto Sleep loaded!";
		Text = "Made by BekacPros. To use type in chat ?AutoSleep PlayerName"
	})

end)
--[[M:NewButton("Remove Fall Damage", "", function()
    local FallDamage = Rep.Events.FallDamage
    FallDamage:Destroy()
end)]]
O:NewButton("Check Qet", "", function()

	local TargetCharacter = Rep.Characters["Qetsiyah"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Qetsiyah Occupied Check!";
			Text = "Qetsiyah is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Qetsiyah Occupied Check!";
			Text = "Qetsiyah is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Hope Check", "", function()

	local TargetCharacter = Rep.Characters["Hope Mikaelson"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Hope Occupied Check!";
			Text = "Hope is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Hope Occupied Check!";
			Text = "Hope is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Niklaus Check", "", function()

	local TargetCharacter = Rep.Characters["Niklaus Mikaelson"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Niklaus Occupied Check!";
			Text = "Niklaus is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Niklaus Occupied Check!";
			Text = "Niklaus is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Rebekah Check", "", function()

	local TargetCharacter = Rep.Characters["Rebekah Mikaelson"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Rebekah Occupied Check!";
			Text = "Rebekah is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Rebekah Occupied Check!";
			Text = "Rebekah is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Kol Check", "", function()

	local TargetCharacter = Rep.Characters["Kol Mikaelson"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Kol Occupied Check!";
			Text = "Kol is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Kol Occupied Check!";
			Text = "Kol is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Finn Check", "", function()

	local TargetCharacter = Rep.Characters["Finn Mikaelson"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Finn Occupied Check!";
			Text = "Finn is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Finn Occupied Check!";
			Text = "Finn is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Elijah Check", "", function()

	local TargetCharacter = Rep.Characters["Elijah Mikaelson"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Elijah Occupied Check!";
			Text = "Elijah is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Elijah Occupied Check!";
			Text = "Elijah is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Valerie Check", "", function()

	local TargetCharacter = Rep.Characters["Valerie Tulle"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Valerie Occupied Check!";
			Text = "Valerie is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Valerie Occupied Check!";
			Text = "Valerie is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Mary Check", "", function()

	local TargetCharacter = Rep.Characters["Mary Louise"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Mary Occupied Check!";
			Text = "Mary is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Mary Occupied Check!";
			Text = "Mary is taken by "..TakenBy.Value
		})

	end

end)
O:NewButton("Nora Check", "", function()

	local TargetCharacter = Rep.Characters["Nora Hildegard"]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Nora Occupied Check!";
			Text = "Nora is not taken!"
		})

	else

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Nora Occupied Check!";
			Text = "Nora is taken by "..TakenBy.Value
		})

	end

end)
Cu:NewButton("Phasmatos Malos Ignis Incendismos", "", function()

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "phasmatos malos ignis incendismos") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 999999 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = "Magic"
						local A2 = 
							{
								[1] = "DisableRing", 
								[2] = Target
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Phasmatos Malos Ignis Incendismos loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
Cu:NewButton("Phasmatos Ictus lacus", "", function()

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "phasmatos ictus lacus") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 999999 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A_1 = "Push"
						local A_2 = 
							{
								[1] = Target
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Phasmatos Ictus lacus loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
Cu:NewButton("Incendiamos motus", "", function()

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "incendiamos motus") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 20 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = "Magic"
						local A2 = 
							{
								[1] = "FireSpell", 
								[2] = Target
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)

						wait()

						local A1 = "Magic"
						local A2 = 
							{
								[1] = "Motus",
								[2] = false,
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Incendiamos motus loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
Cu:NewButton("Gemino Delfan eoten coris", "", function()

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "gemino delfan eoten coris") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 20 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = "Magic"
						local A2 = 
							{
								[1] = "TelekineticHeart", 
								[2] = Target
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)


					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Gemino Delfan eoten coris loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
Cu:NewButton("Phasmatos Motus Incendiamos", "", function()

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "phasmatos motus incendiamos") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 999999 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = "Magic"
						local A2 = 
							{
								[1] = "FireCircle", 
								[2] = Target
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)


					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Phasmatos Motus Incendiamos loaded!";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
Cu:NewButton("Phasmatos Expulso Maxima", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService("UserInputService")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "Phasmatos Expulso Maxima") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = "Magic"
						local A2 = 
							{
								[1] = "FireSpell", 
								[2] = Target
							}
						for i = 1,20 do
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)
                    	end
						local A_1 = "Magic"
						local A_2 = 
							{
								[1] = "Explosion",
								[2] = Target.HumanoidRootPart.CFrame.p
							}
						for i=1,20 do
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A_1, A_2)
						end
    					local A_1 = "Push"
    					local A_2 = 
    						{
    							[1] = Target
    						}
						for i=1,50 do
    					local Event = game:GetService("ReplicatedStorage").Events.Witch
    					Event:FireServer(A_1, A_2)
						end
					end
				end
			end
		end
	end)
end)
Cu:NewButton("Phasmatos Devoram Maxima", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService("UserInputService")
	local Mouse = Player:GetMouse()
	local Debounce = true
	local Key = 'Y'
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "phasmatos devoram maxima") then
			for i=0, 10, 0.5 do

				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "AdvancedInflict"
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)

				wait(0.5)


				local A_1 = "Magic"
				local A_2 = 
					{
						[1] = "SnapAll"
					}
				local Event = game:GetService("ReplicatedStorage").Events.Witch
				Event:FireServer(A_1, A_2)

				wait(0.5)

				if i == 9.5 then


					local A_1 = "Magic"
					local A_2 = 
						{
							[1] = "Motus"
						}
					local Event = game:GetService("ReplicatedStorage").Events.Witch
					Event:FireServer(A_1, A_2)

					local A_1 = "Magic"
					local A_2 = 
						{
							[1] = "Invisibility"
						}
					local Event = game:GetService("ReplicatedStorage").Events.Witch
					Event:FireServer(A_1, A_2)
				end
			end
		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Phasmatos Devoram Maxima loaded";
		Text = "Made by HeartBroken_Boi#0001"
	})

end)
Cu:NewButton("Ascendo(say to use)", "", function()
    local Player = game.Players.LocalPlayer
    local Character = Player.Character
    local Humanoid = Character.Humanoid
    local UserInputService = game:GetService("UserInputService")
    local Mouse = Player:GetMouse()
    local Debounce = true
    local Key = 'Y'
    local db = true
    
    Player.Chatted:Connect(function(chat)
        local low = string.lower(chat)
        if string.find(low, "ascendo") then
                    local Humanoid = game.Players.LocalPlayer.Character.Humanoid
                    local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
                    for _,v in pairs(ActiveTracks)
                        do v:Stop()
                    end
                    local AnimationId = "6112652562"
                    local Anim = Instance.new("Animation")
                    Anim.AnimationId = "rbxassetid://"..AnimationId
                    local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
                    k:Play()
                    k:AdjustSpeed(0.5)
                    wait(16)
                    local Humanoid = game.Players.LocalPlayer.Character.Humanoid
                    local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
                    for _,v in pairs(ActiveTracks)
                        do v:Stop()
                    end
                end
            end)
end)
Cu:NewButton("Ascendo 2(click to use)", "", function()
		AnimationId = "507785072"
		local Ascendo = Instance.new("Animation")
		Ascendo.AnimationId = "rbxassetid://"..AnimationId
		local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo)
		k:Play()
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 45
		AnimationId = "5414156941"
		local Ascendo2 = Instance.new("Animation")
		Ascendo2.AnimationId = "rbxassetid://"..AnimationId
		local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo2)
		k:Play()
		game.Players.LocalPlayer.Character.Humanoid.HipHeight = 5
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 45
		wait(10)   
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
		local Humanoid = game.Players.LocalPlayer.Character.Humanoid
		local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
		for _,v in pairs(ActiveTracks)
		    do v:Stop()
		end
		game.Players.LocalPlayer.Character.Humanoid.HipHeight = 2
end)
Cu:NewButton("Ignis Ubique", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService("UserInputService")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "ignis ubique") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
						local Target = Player.Character or Player.CharacterAdded:Wait()
						AnimationId = "5414902308"
						local Ascendo2 = Instance.new("Animation")
						Ascendo2.AnimationId = "rbxassetid://"..AnimationId
						local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo2)
						k:Play()
						local A1 = "Magic"
						local A2 = 
							{
								[1] = "FireSpell", 
								[2] = Target
							}
						for i = 1,20 do
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)
                    				end
						local Humanoid = game.Players.LocalPlayer.Character.Humanoid
						local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
						for _,v in pairs(ActiveTracks)
						do v:Stop()
						end
					end
				end
			end
		end
	end)

	wait(0.3)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Ignis Ubique loaded";
		Text = "Made by HeartBroken_Boi#0001"
	})
end)
Cu:NewButton("Phasmatos Uplacox", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService("UserInputService")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "phasmatos uplacox") then
			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do
				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
							local A_1 = "Magic"
							local A_2 = 
								{
									[1] = "Motus",
									[2] = false,
								}
							for i=1,1000 do
							local Event = game:GetService("ReplicatedStorage").Events.Witch
							Event:FireServer(A_1, A_2)
							end
						wait(0.1)
							local A_1 = "Magic"
							local A_2 = 
								{
									[1] = "SnapAll"
								}
							local Event = game:GetService("ReplicatedStorage").Events.Witch
							Event:FireServer(A_1, A_2)
						end
					end
				end
			end
		end)
end)
Cu:NewButton("Somnus", "", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService("UserInputService")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, "somnus") then
			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = "Magic"
						local A2 = 
							{
								[1] = "SleepSpell", 
								[2] = Target
							}
						local Event = game:GetService("ReplicatedStorage").Events.Witch
						Event:FireServer(A1, A2)

					end
				end
			end
		end
	end)
end)

T:NewButton("Red Rose Coven Room", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-376, -268, -4881)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Teleport To Hestia Room", "", function()
	local Path = game:GetService("Workspace"):FindFirstChild("HestiaDoor")
	local Path1 = game:GetService("Workspace").Effect
	local pos = Path1.CFrame.p
   if Path then
		Path:Destroy()
	end
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
end)
T:NewButton("Teleport To Astrailis Room", "", function()
   local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
   if game:GetService("Workspace"):FindFirstChild("AstralisDoor") then
		game:GetService("Workspace"):FindFirstChild("AstralisDoor"):Destroy()
	end
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-382, 3, -50)
end)
T:NewButton("Teleport To Laveau Room", "", function()
   if game:GetService("Workspace"):FindFirstChild("LaveauDoor") then
		game:GetService("Workspace"):FindFirstChild("LaveauDoor"):Destroy()
	end
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-380, 3, 7)
end)
T:NewButton("The Wolf Den", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(406, 5, 570)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Witch Tunnel", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-225, -26, -69)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Human Spawn", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-502, 5, 261)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("The Bar", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-503, 3, 52)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Church", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-518, 4, 2)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Stakes", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-368, 3, 84)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Res Circle 2", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-443, 5, -29)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton("Res Circle 1", "", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-126, 5, 2)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
local Char = "Sybil"
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Niklaus Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Hope Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Bonnie Bennet"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Finn Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Kol Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Rebekah Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Elijah Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Nora Hildegard"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Valerie Tulle"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Mary Louise"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Qetsiyah"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = "Freya Mikaelson"
P:NewLabel(Char.." Section")
P:NewButton("Heal "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
	local A_2 = 
		{
			[1] = "Invisibility"
		}
	local Event = game:GetService("ReplicatedStorage").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = "Heal"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Burn "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = "Magic",
	    [2] = {
		[1] = "FireSpell",
		[2] = Target
	    }
	}

	game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))

end)
P:NewButton("Push "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Push"
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Push "..Char.." Dead Body", "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Motus",
            [2] = true,
            [3] = game:GetService("Workspace").deathClones[(plr.Name)..("deathClone")]
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("White Oak Stake "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = "Original"
    local Event = game:GetService("ReplicatedStorage").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Tp to "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton("Sleep "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "SleepSpell", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton("Delfan "..Char, "", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "TelekineticHeart", 
            [2] = Target
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
end)--[[
C:NewLabel("Q = fire circle")
C:NewLabel("R = push")
C:NewLabel("G = pain")
C:NewLabel("T = errox femus")
C:NewLabel("L = ring off")
C:NewLabel("K -= ring on")
C:NewLabel("M = davina blood choke(exclusive to davina)")
C:NewLabel("B = delfan")
C:NewLabel("J = neck snap")
C:NewLabel("P = snap around you")
C:NewLabel("F = motus")
C:NewLabel("Y = explode")--]]
C:NewButton("https://discord.gg/zontware", "", function()
    setclipboard([[https://discord.gg/zontware]])
end)
C:NewButton("https://www.tiktok.com/@zontware", "", function()
    setclipboard([[https://www.tiktok.com/@zontware]])
end)
C:NewButton("https://www.youtube.com/channel/UCwjtyB9A-Gy90xq_W4B8TQw", "", function()
    setclipboard([[https://www.youtube.com/channel/UCwjtyB9A-Gy90xq_W4B8TQw]])
end)
WB:NewToggle("Keybinds", "If true then Keybinds will work", function(state)
    if state == true then
        game.workspace.AstroValues.Keys.Value = "Active"
    else
        game.workspace.AstroValues.Keys.Value = "In Active"
    end
end)
WB:NewKeybind("Unragdoll", "",Enum.KeyCode.Z, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    if IsTyping then return end
    local args = {
        [1] = 1
    }
    game:GetService("ReplicatedStorage").Events.FallDamage:FireServer(unpack(args))
    end
end)

WB:NewKeybind("Push", "",Enum.KeyCode.R, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Push",
                [2] = {
                        [1] = player.Character
                }
            }
                    
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																	
        end
    end
end)

WB:NewKeybind("Incendia", "",Enum.KeyCode.C, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Magic",
                [2] = {
                    [1] = "FireSpell",
                    [2] = player.Character
                }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
        end
    end
end)
WB:NewKeybind("Pain", "",Enum.KeyCode.G, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "PainInflict",
            [2] = {
                    [1] = player.Character
            }
        }
                
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
    end
    end
end)
WB:NewKeybind("Mass Neck Snap", "",Enum.KeyCode.P, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local args = {
        [1] = "Magic",
        [2] = {
        [1] = "SnapAll"
        }
    }
    
    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
WB:NewKeybind("Explode", "",Enum.KeyCode.Y, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local A_1 = "Magic"
    local A_2 = 
    {
        [1] = "Explosion",
        [2] = Mouse.Hit.p
    }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
    end
end)
WB:NewKeybind("Motus", "",Enum.KeyCode.F, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local args = {
        [1] = "Magic",
        [2] = {
        [1] = "Motus",
        [2] = false
        }
    }
    
    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
WB:NewKeybind("Fire Circle", "",Enum.KeyCode.Q, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "FireCircle",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))   																		
    end
    end
end)
WB:NewKeybind("Ring Off", "",Enum.KeyCode.K, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "DisableRing",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Ring On", "",Enum.KeyCode.L, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "EnableRing",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Heart Rip", "",Enum.KeyCode.B, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "TelekineticHeart",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Errox Femus", "",Enum.KeyCode.T, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "BreakLeg",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																				
    end
    end
end)
WB:NewKeybind("Sleep Spell", "",Enum.KeyCode.J, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local A_1 = "Magic"
        local A_2 = 
            {
                [1] = "SleepSpell", 
                [2] = player.Character
            }
        local Event = game:GetService("ReplicatedStorage").Events.Witch
        Event:FireServer(A_1, A_2)																	
    end
    end
end)
WB:NewKeybind("Davina Blood Choke", "",Enum.KeyCode.M, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local A_1 = "Magic"
            local A_2 = 
                {
                    [1] = "BloodChoke", 
                    [2] = player.Character
                }
            local Event = game:GetService("ReplicatedStorage").Events.Witch
            Event:FireServer(A_1, A_2)																		
    end
    end
end)
WB:NewKeybind("Siphon", "",Enum.KeyCode.X, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Siphon",
            [2] = {
                [1] = player.Character,
                [2] = "Offensive"
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Invisibility", "",Enum.KeyCode.N, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Invisibility"
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
    end
end)
--[[WB:NewKeybind("Teleportation", "",Enum.KeyCode.E, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local Players = game:GetService("Players")
    local plr = Players.LocalPlayer
    local Char = plr.Character
    local Hum = Char.HumanoidRootPart
    local Mouse = plr:GetMouse()
    local mousep = Mouse.Hit.p
    local X = mousep.X
    local Y = mousep.Y
    local Z = mousep.Z
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(math.round(X),math.round(Y)+2,math.round(Z))
    end
end)
--VB:NewLabel("Must Have Energy To Use These")
VB:NewKeybind("Heal", "",Enum.KeyCode.E, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then

    end
end)
VB:NewKeybind("Feed(Vamps Only)", "",Enum.KeyCode.C, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then

    end
end)
VB:NewKeybind("Wolf Bite", "",Enum.KeyCode.T, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then

    end
end)
VB:NewKeybind("Neck Snap", "",Enum.KeyCode.E, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then

    end
end)
VB:NewKeybind("Turn(Wolfs Only)", "",Enum.KeyCode.E, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then

    end
end)
VB:NewKeybind("Unturn(Wolfs Only)", "",Enum.KeyCode.E, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then

    end
end)
VB:NewKeybind("Heart Rip(Og Vamps Only)", "",Enum.KeyCode.E, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then

    end
end)
VB:NewKeybind("Head Remove(Og Vamps Only)", "",Enum.KeyCode.E, function()
    if game.workspace.AstroValues.Keys.Value == "Active" then

    end
end)--]]
VB:NewLabel("Must Have Energy To Use These")
G:NewKeybind("Toggle Gui", "", Enum.KeyCode.RightControl, function()
	Library:ToggleUI()
end)